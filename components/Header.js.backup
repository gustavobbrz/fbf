import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import SportsSoccerIcon from '@mui/icons-material/SportsSoccer';
import LightModeIcon from '@mui/icons-material/LightMode';
import DarkModeIcon from '@mui/icons-material/DarkMode';
import MenuIcon from '@mui/icons-material/Menu';
import CloseIcon from '@mui/icons-material/Close';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemText from '@mui/material/ListItemText';
import Drawer from '@mui/material/Drawer';
import Collapse from '@mui/material/Collapse';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const navLinks = [
  { href: '/classificacao', label: 'Classificação' },
  { href: '/ranking', label: 'Ranking' },
  { href: '/sobre', label: 'Sobre' },
  { href: '/jornal', label: 'Jornal' },
  { href: '/noticias', label: 'Notícias' },
];
const campeonatosLinks = [
  { href: '/campeonatos', label: 'Todos' },
  { href: '/campeonatos?tipo=principal', label: 'FBF Principal' },
  { href: '/campeonatos?tipo=aspirantes', label: 'FBF Aspirantes' },
  { href: '/campeonatos?tipo=urun', label: 'URUN X4' },
  { href: '/campeonatos?tipo=semanal', label: 'FBF Semanal' },
  { href: '/campeonatos?tipo=x1', label: 'FBF X1 Rei das Quadradas' },
  { href: '/campeonatos?tipo=pre', label: 'FBF Pré Temporada' },
];
const inscricoesLinks = [
  { href: '/inscricoes', label: 'Todas' },
  { href: '/inscricoes?tipo=fbfx3', label: 'FBFX3' },
  { href: '/inscricoes?tipo=urunx4', label: 'URUNX4' },
  { href: '/inscricoes?tipo=eventos', label: 'Eventos' },
];

export default function Header() {
  const [dark, setDark] = useState(false);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [openCampeonatos, setOpenCampeonatos] = useState(false);
  const [openInscricoes, setOpenInscricoes] = useState(false);
  const router = useRouter();

  // Alternar dark/light mode
  const handleToggleTheme = () => {
    setDark(!dark);
    if (typeof window !== 'undefined') {
      document.documentElement.classList.toggle('dark', !dark);
    }
  };

  const isActive = (href) => {
    if (href === '/') return router.pathname === '/';
    return router.asPath.startsWith(href);
  };

  const renderNavLinks = (isMobile = false) => (
    <>
      {navLinks.map((link) => (
        <Link href={link.href} key={link.href} legacyBehavior>
          <a
            className={`nav-link${isActive(link.href) ? ' nav-link-active' : ''}${isMobile ? ' mobile-nav-link' : ''}`}
            aria-current={isActive(link.href) ? 'page' : undefined}
          >
            {link.label}
          </a>
        </Link>
      ))}
      {/* Dropdown Campeonatos */}
      <div className="relative group">
        <button
          className={`nav-link flex items-center gap-1${isActive('/campeonatos') ? ' nav-link-active' : ''}${isMobile ? ' mobile-nav-link' : ''}`}
          aria-haspopup="true"
          aria-expanded={openCampeonatos}
          onClick={() => isMobile ? setOpenCampeonatos((v) => !v) : null}
          tabIndex={0}
        >
          Campeonatos {isMobile ? (openCampeonatos ? <ExpandLess /> : <ExpandMore />) : <ExpandMore className="dropdown-icon" />}
        </button>
        {/* Dropdown menu */}
        <div 
          className={`dropdown-menu${isMobile ? '' : ' hidden group-hover:flex'} bg-white dark:bg-gray-800 shadow-lg rounded-md absolute z-50 left-0 mt-2 min-w-[200px] flex-col`}
          style={{ display: isMobile && openCampeonatos ? 'flex' : undefined }}
        >
          {campeonatosLinks.map((item) => (
            <Link href={item.href} key={item.href} legacyBehavior>
              <a className={`dropdown-link${isActive(item.href) ? ' nav-link-active' : ''}`}>{item.label}</a>
            </Link>
          ))}
        </div>
      </div>
      {/* Dropdown Inscrições */}
      <div className="relative group">
        <button
          className={`nav-link flex items-center gap-1${isActive('/inscricoes') ? ' nav-link-active' : ''}${isMobile ? ' mobile-nav-link' : ''}`}
          aria-haspopup="true"
          aria-expanded={openInscricoes}
          onClick={() => isMobile ? setOpenInscricoes((v) => !v) : null}
          tabIndex={0}
        >
          Inscrições {isMobile ? (openInscricoes ? <ExpandLess /> : <ExpandMore />) : <ExpandMore className="dropdown-icon" />}
        </button>
        <div 
          className={`dropdown-menu${isMobile ? '' : ' hidden group-hover:flex'} bg-white dark:bg-gray-800 shadow-lg rounded-md absolute z-50 left-0 mt-2 min-w-[200px] flex-col`}
          style={{ display: isMobile && openInscricoes ? 'flex' : undefined }}
        >
          {inscricoesLinks.map((item) => (
            <Link href={item.href} key={item.href} legacyBehavior>
              <a className={`dropdown-link${isActive(item.href) ? ' nav-link-active' : ''}`}>{item.label}</a>
            </Link>
          ))}
        </div>
      </div>
      <Link href="/times" legacyBehavior><a className={`nav-link${isActive('/times') ? ' nav-link-active' : ''}${isMobile ? ' mobile-nav-link' : ''}`}>Times</a></Link>
      <Link href="/dashboard" legacyBehavior><a className={`nav-link${isActive('/dashboard') ? ' nav-link-active' : ''}${isMobile ? ' mobile-nav-link' : ''}`}>Dashboard</a></Link>
      <Link href="/multimidia" legacyBehavior><a className={`nav-link${isActive('/multimidia') ? ' nav-link-active' : ''}${isMobile ? ' mobile-nav-link' : ''}`}>Multimídia</a></Link>
    </>
  );

  return (
    <AppBar 
      position="sticky" 
      color={dark ? 'default' : 'primary'} 
      elevation={3} 
      sx={{ 
        zIndex: 1400,
        background: dark ? 'linear-gradient(to right, #1e293b, #334155)' : 'linear-gradient(to right, #1e40af, #2563eb)',
        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
      }}
    >
      <Toolbar className="flex justify-between max-w-7xl mx-auto w-full px-2 md:px-6 py-1">
        <div className="flex items-center gap-3">
          <span className="rounded-full bg-white p-1 shadow-md mr-2 logo-container">
            <SportsSoccerIcon fontSize="large" sx={{ color: '#1976d2' }} className="logo-icon" />
          </span>
          <Typography variant="h5" component="div" className="font-extrabold tracking-widest text-white drop-shadow-md">
            <Link href="/" legacyBehavior>
              <a className="flex items-center gap-1 hover:opacity-80 transition-all duration-200">
                FBF <span className="hidden md:inline">Haxball</span>
              </a>
            </Link>
          </Typography>
        </div>
        {/* Desktop nav */}
        <nav className="hidden md:flex gap-1 md:gap-2 items-center relative">
          {renderNavLinks(false)}
          <IconButton 
            color="inherit" 
            onClick={handleToggleTheme} 
            aria-label="Alternar tema"
            className="theme-button ml-2"
          >
            {dark ? <LightModeIcon /> : <DarkModeIcon />}
          </IconButton>
        </nav>
        {/* Mobile nav */}
        <div className="md:hidden flex items-center">
          <IconButton 
            color="inherit" 
            onClick={() => setDrawerOpen(true)} 
            aria-label="Abrir menu"
            className="menu-button"
          >
            <MenuIcon />
          </IconButton>
          <Drawer 
            anchor="right" 
            open={drawerOpen} 
            onClose={() => setDrawerOpen(false)}
            PaperProps={{
              sx: {
                borderTopLeftRadius: '12px',
                borderBottomLeftRadius: '12px',
              }
            }}
          >
            <div className="w-72 h-full flex flex-col bg-white dark:bg-gray-900">
              <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800 bg-blue-50 dark:bg-gray-800">
                <span className="flex items-center gap-2 font-bold text-blue-900 dark:text-white">
                  <SportsSoccerIcon sx={{ color: '#1976d2' }} /> FBF Haxball
                </span>
                <IconButton onClick={() => setDrawerOpen(false)} aria-label="Fechar menu" className="close-button">
                  <CloseIcon />
                </IconButton>
              </div>
              <List>
                <ListItem disablePadding>
                  <ListItemButton onClick={handleToggleTheme} className="theme-toggle-button">
                    <ListItemText primary={dark ? 'Modo Claro' : 'Modo Escuro'} />
                    {dark ? <LightModeIcon /> : <DarkModeIcon />}
                  </ListItemButton>
                </ListItem>
                <ListItem disablePadding>
                  <ListItemText primary={<div className="h-2" />} />
                </ListItem>
                <div className="flex flex-col gap-1 px-3">
                  {renderNavLinks(true)}
                </div>
              </List>
            </div>
          </Drawer>
        </div>
      </Toolbar>
      <style jsx>{`
        .nav-link {
          @apply hidden md:inline px-3 py-2 rounded-md font-medium text-white hover:bg-blue-800/70 dark:hover:bg-gray-700/70 transition-all duration-200 cursor-pointer;
          position: relative;
          overflow: hidden;
        }
        .nav-link:after {
          content: '';
          position: absolute;
          bottom: 0;
          left: 50%;
          width: 0;
          height: 2px;
          background-color: #fde047;
          transition: all 0.3s ease;
          transform: translateX(-50%);
        }
        .nav-link:hover:after {
          width: 70%;
        }
        .mobile-nav-link {
          @apply block w-full px-3 py-2 rounded-md font-medium text-blue-900 dark:text-white hover:bg-blue-100 dark:hover:bg-gray-800 my-1;
        }
        .nav-link-active {
          @apply bg-blue-800/60 dark:bg-gray-700/60 shadow-md font-semibold text-yellow-300;
        }
        .nav-link-active:after {
          width: 70%;
        }
        .dropdown-menu {
          min-width: 200px;
          display: none;
          flex-direction: column;
          transform: translateY(8px);
          transition: transform 0.2s ease-in-out;
          overflow: hidden;
        }
        .group:hover .dropdown-menu,
        .group:focus-within .dropdown-menu {
          display: flex;
          transform: translateY(0);
        }
        .dropdown-link {
          @apply px-4 py-2 text-blue-900 dark:text-white hover:bg-blue-100 dark:hover:bg-gray-700 w-full text-left rounded transition-all duration-200;
        }
        .dropdown-link.nav-link-active {
          @apply bg-blue-700 dark:bg-gray-700 text-yellow-300 font-medium;
        }
        .dropdown-icon {
          transition: transform 0.2s ease;
        }
        .group:hover .dropdown-icon {
          transform: rotate(180deg);
        }
        .logo-container {
          transition: transform 0.3s ease;
        }
        .logo-container:hover {
          transform: rotate(20deg);
        }
        .theme-button, .menu-button, .close-button {
          transition: transform 0.2s ease;
        }
        .theme-button:hover, .menu-button:hover, .close-button:hover {
          transform: scale(1.1);
        }
        .theme-toggle-button {
          transition: background-color 0.2s ease;
        }
        .theme-toggle-button:hover {
          background-color: rgba(25, 118, 210, 0.08);
        }
      `}</style>
    </AppBar>
  );
}
